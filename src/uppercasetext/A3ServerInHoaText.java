
//1
//Nguyen Khac Huy - 2280601183
//1
package uppercasetext;

import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.net.ServerSocket;
import java.net.Socket;
import java.net.SocketException;
import javax.swing.JOptionPane;

public class A3ServerInHoaText extends javax.swing.JFrame {

    //B2-Bien cuc bo
    private int port = 1001;//port
    private ServerSocket ss;//server
    private Socket socket;//D.tuong K,noi
    private Thread thread_1;
    private Thread threadListener;
    
    private BufferedReader in;
    private PrintWriter out;
    
    
    //CTC
    public void CleanTxtSend(){
        txtInHoa.setText("");
    }

    private static final java.util.logging.Logger logger = java.util.logging.Logger.getLogger(A3ServerInHoaText.class.getName());

    public A3ServerInHoaText() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        btnOnOff = new javax.swing.JButton();
        btnClose = new javax.swing.JButton();
        txtInHoa = new javax.swing.JTextField();
        txtReceive = new javax.swing.JTextField();
        labelStatus = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 0, 51));
        jLabel1.setText("Server: ");

        btnOnOff.setText("Bật Server");
        btnOnOff.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnOnOffActionPerformed(evt);
            }
        });

        btnClose.setText("Close");
        btnClose.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCloseActionPerformed(evt);
            }
        });

        labelStatus.setText("Đang: Tắt");

        jLabel2.setText("ND Đã in Hoa: ");

        jLabel3.setText("ND Nhận:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(labelStatus, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(btnOnOff, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(btnClose))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(24, 24, 24)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtInHoa, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 267, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtReceive, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 267, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(42, 42, 42))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel1)
                        .addComponent(labelStatus))
                    .addComponent(btnOnOff, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtReceive, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtInHoa, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnClose)
                .addContainerGap(147, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnCloseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCloseActionPerformed
        // TODO add your handling code here:
        dispose();
    }//GEN-LAST:event_btnCloseActionPerformed


    private void btnOnOffActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnOnOffActionPerformed
        //M.1
        try {
            //start
            //BD
            //Đổi trạng thái
            if (labelStatus.getText().compareTo("Đang: Tắt") == 0) {
                //Bật
                labelStatus.setText("Đang: Bật");
                btnOnOff.setText("Đóng Server");
                
                //C.hinh bien cuc bo
                ss = new ServerSocket(port);
                System.out.println("Server: Open ServerSocket");
                System.out.println("Server Online on port: 1001");
                System.out.println("Waiting...");
               
                
                //bo vao luong moi
                thread_1=new Thread(()->{ 
                    try{
                        socket=ss.accept();
                        System.out.println("Have A Client Connected");
                        //Todo-> xu lý khi dang co 1 connection
                        
                        //tao bien de Doc/Gui
                        in = new BufferedReader(new InputStreamReader(socket.getInputStream()));
                        out = new PrintWriter(socket.getOutputStream(), true);

                        //doc nd tu client
                        threadListener=new Thread(()->{
                            try{
                                String textOfServer;
                                while((textOfServer=in.readLine())!=null){
                                    txtReceive.setText(textOfServer);
                                    //xu ly in hoa
                                    String inHoa=textOfServer.toUpperCase();
                                    System.out.println("Thường: "+textOfServer);
                                    System.out.println("Hoa: "+inHoa);
                                    txtInHoa.setText(inHoa);
                                    
                                    //gửi lại cho Server
                                    out.println(inHoa);
                                    System.out.println("Server: Đã chuyển dữ liệu cho Client ");
                                    JOptionPane.showMessageDialog(this, "Server: Đã chuyển dữ liệu cho Client ");

                                }
                            }catch(Exception e){
                                System.out.println("ThreadListen: "+e);
                            }
                        } );
                        threadListener.start();

                    }catch(SocketException ex){//dong socket
                        System.out.println("Thông báo: "+ex);
                    }catch(Exception e){
                        System.out.println("Error: "+e);
                    }
                    
                } );
                thread_1.start();
            } else {
                //Tắt
                labelStatus.setText("Đang: Tắt");
                btnOnOff.setText("Mở Server");
                //Đóng K.Nối có kiểm tra
                if(socket!=null && !socket.isClosed()){
                    socket.close();
                    System.out.println("Server: Đã đóng Socket");
                }
                if(ss!=null && !ss.isClosed()){
                    ss.close();
                    System.out.println("Server: Đã đóng ServerSocket");
                }
            }

            //end
        } catch (Exception e) {
            System.out.println("Error: " + e);
        }
    }//GEN-LAST:event_btnOnOffActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ReflectiveOperationException | javax.swing.UnsupportedLookAndFeelException ex) {
            logger.log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> new A3ServerInHoaText().setVisible(true));
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnClose;
    private javax.swing.JButton btnOnOff;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel labelStatus;
    private javax.swing.JTextField txtInHoa;
    private javax.swing.JTextField txtReceive;
    // End of variables declaration//GEN-END:variables

    //CTC
    

}
